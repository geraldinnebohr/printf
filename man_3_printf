.TH man 3 "29 Jul 2019" "1.0" "_printf man page"
.SH NAME
.br
.B _printf
- print data
.br
.SH SYNOPSIS
.br
int _printf(const char *format, ...);

#include "holberton.h"
.PP
.B int _printf(const char *format, ...);
.PP
.B int _putchar(char c);
.br
.PP
.B #include
.PP
.B int printf_char(va_list args);
.PP
.B int printf_string(va_list args);
.PP
.B int printf_int(va_list args);
.br
.SH DESCRIPTION
.br
_printf() produce output according to a format, write output to stdout.
.br
.SH OPTIONS
.br
.B Characters
.PP
_printf("Character with _print:[%c][%c][%c][%c]\n", 'c', 's', 'd', 'i');
.PP
.I Output:
Holb
.PP
.B Strings
.PP
_printf("String:[%s]\n", "Hello, Holberton!");
.PP
.I Output:
Hello, Holberton
.PP
.B Decimal and Integers
.PP
_printf("Actual: %i\n", INT_MIN);
_printf("Actual: %i\n", INT_MAX);
.I Output:
-2147483648
+2147483647
.br
.SH SEE ALSO
.br
.I printf(3), puts(3), putchar(3)
.br
.SH BUGS
.br
for now the function _printf don?t handle the flag characters, field width, precision, and length modifiers 
.br
.SH EXAMPLE
.br
.PP
.I we use these libraries:
.PP
#include <stdarg.h>
#include <unistd.h>
#include <stdlib.h>
.PP
We use these conversion specifiers:
.PP
{"c", printf_char},
{"s", printf_str},
{"%", printf_porc},
{"d", printf_digit},
{"i", printf_digit},
{"r", printf_reversed},
{NULL, NULL}
.PP
Part of the code we use:
.PP
if (format[cont] != '%')
_putchar(format[cont]);
else if (format[cont] == '%' && format[cont + 1] == '\0')
{
return (-1);
}
.br
.SH AUTHOR
.br
Geraldinne Bohorquez, Edgar Rodriguez